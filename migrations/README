Документация по запуску проекта Landing Page
Этот документ объясняет, как установить, настроить и запустить проект Landing Page. Проект написан на Python с использованием Flask и предназначен для управления контентом сайта, включая баннеры, проекты, отзывы и другие данные через админ-панель. Инструкции рассчитаны на пользователей Windows с минимальным опытом.
Требования

Операционная система: Windows 10 или новее.
Python: Версия 3.8 или выше (рекомендуется 3.11).
Git: Установлен для работы с репозиторием.
Браузер: Любой современный браузер (Chrome, Firefox и т.д.).
Текстовый редактор: Visual Studio Code, Notepad++ или Блокнот для редактирования файлов.

Установка
1. Установите Python

Скачайте и установите Python с официального сайта.
Убедитесь, что при установке отмечен флажок "Add Python to PATH".
Проверьте версию Python в PowerShell:python --version

Должно вывести, например, Python 3.11.9.

2. Клонируйте репозиторий

Откройте PowerShell.
Перейдите в папку, где хотите хранить проект (например, Desktop):cd C:\Users\User\Desktop


Склонируйте репозиторий (замените URL_репозитория на ссылку вашего репозитория, например, https://github.com/username/landing_page.git):git clone URL_репозитория


Перейдите в папку проекта:cd landing_page



3. Настройте виртуальное окружение

Создайте виртуальное окружение:python -m venv venv


Активируйте виртуальное окружение:.\venv\Scripts\Activate.ps1

В PowerShell появится (venv) перед строкой, что означает, что окружение активно.

4. Установите зависимости

Убедитесь, что в папке проекта есть файл requirements.txt. Он должен содержать:flask==3.1.1
flask-sqlalchemy==3.1.1
flask-migrate==4.1.0
flask-login==0.6.3
flask-admin==1.6.1
flask-cors==6.0.1
flask-babel==4.0.0
jinja2==3.0.3
wtforms==3.1.2
sqlalchemy==2.0.41
flask-restful==0.3.10


Установите зависимости:pip install -r requirements.txt



5. Настройте базу данных

Укажите Flask, где находится приложение:$env:FLASK_APP = "app"


Инициализируйте миграции для базы данных:flask db init


Создайте миграцию:flask db migrate -m "Initial migration with all models"


Примените миграцию для создания базы данных (site.db):flask db upgrade



6. Запустите проект

Убедитесь, что файл run.py есть в папке C:\Users\User\Desktop\landing_page. Он должен содержать:from app import create_app

app = create_app()
app.run(debug=True)


Запустите приложение:python run.py


Откройте браузер и перейдите по адресу:http://localhost:5000/

Вы должны увидеть главную страницу сайта.

7. Доступ к админ-панели

Перейдите по:http://localhost:5000/admin/


Войдите с учётной записью администратора:
Логин: admin
Пароль: admin123


Для редактирования отзывов перейдите:http://localhost:5000/admin/review/edit/?id=1&url=/admin/review/



Устранение неполадок

Ошибка no such column:
Удалите файл site.db и папку migrations:Remove-Item -Path site.db -ErrorAction SilentlyContinue
Remove-Item -Path migrations -Recurse -Force -ErrorAction SilentlyContinue


Повторите шаги 5.2–5.4 для пересоздания базы данных.


Ошибка ValueError: not enough values to unpack:
Проверьте, что версия wtforms в requirements.txt равна 3.1.2:pip show wtforms


Если версия отличается, установите правильную:pip install wtforms==3.1.2




Кэш Python мешает:
Очистите кэшированные файлы:Get-ChildItem -Path . -Recurse -Include *.pyc,*.pyo,__pycache__ | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue





Как запушить проект в репозиторий
Если ты внёс изменения в проект и хочешь загрузить их в репозиторий (например, на GitHub), выполни следующие шаги:

Проверь статус изменений:
git status

Увидишь список изменённых файлов.

Добавь изменённые файлы:

Чтобы добавить все изменения:git add .


Или добавь конкретный файл, например:git add app/__init__.py




Создай коммит:

Введи команду с описанием изменений (замени Ваши изменения на своё сообщение):git commit -m "Ваши изменения"




Запушь в репозиторий:

Если репозиторий уже связан с GitHub, введи:git push origin main


Замени main на название твоей ветки, если она другая (например, master).
Если потребуется логин/пароль, используй свои данные GitHub или токен доступа.


Если репозиторий ещё не связан:

Добавь удалённый репозиторий (замени URL_репозитория):git remote add origin URL_репозитория


Затем выполни git push origin main.



Дополнительные советы

Логи: Если что-то не работает, проверь логи в PowerShell после запуска python run.py. Ищи строки, начинающиеся с ERROR:app или Traceback.
Обновление зависимостей: Если добавляешь новые библиотеки, обнови requirements.txt:pip freeze > requirements.txt


Резервная копия: Перед большими изменениями делай копию папки проекта.

Контакты
Если возникнут вопросы, напишите в поддержку или создайте issue в репозитории.
